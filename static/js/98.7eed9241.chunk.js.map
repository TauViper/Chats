{"version":3,"file":"static/js/98.7eed9241.chunk.js","mappings":"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","sources":["webpack://samuray-way/./src/Components/Content/Users/Users.module.css?362f","Components/Content/Users/PagesCount.tsx","Components/Content/Users/CountInputOnePage.tsx","Components/Content/Users/Users.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"userContainer\":\"Users_userContainer__kPcwj\",\"userPhoto\":\"Users_userPhoto__pdUvz\",\"userData\":\"Users_userData__FFS7z\",\"userFallowedBtn\":\"Users_userFallowedBtn__cfg1K\",\"userInfo\":\"Users_userInfo__1QBlc\",\"userName\":\"Users_userName__+tTah\",\"userLocation\":\"Users_userLocation__TIhpW\",\"isActive\":\"Users_isActive__wJoig\",\"nonActive\":\"Users_nonActive__Gsliz\"};","import { FC, useState } from 'react';\nimport classes from './Users.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { StoreState } from 'src/Components/Store';\nimport { currentPage } from 'src/Components/Store/currentPageReducer';\n\nconst oneBlockItems = 10;\ntype Props = {\n  usersOnPage: number;\n};\n\nexport const PageCount: FC<Props> = ({ usersOnPage }) => {\n  const totalUsers = useSelector((state: StoreState) => state.total);\n\n  const currentPageState = useSelector(\n    (state: StoreState) => state.currentPage\n  );\n  const dispatch = useDispatch();\n\n  const usersPage: Array<number> = [];\n  const usersDef: number = Math.ceil(totalUsers / usersOnPage);\n\n  const itemBlock: number = Math.ceil(usersDef / oneBlockItems);\n  const [portionItems, setPosionItems] = useState(1);\n  const leftside = (portionItems - 1) * oneBlockItems + 1;\n  const rightSize = portionItems * oneBlockItems;\n\n  for (let i = 1; i <= usersDef; i++) {\n    usersPage.push(i);\n  }\n\n  const currentPageNum = (num: number) => {\n    dispatch(currentPage(num));\n  };\n  return (\n    <div style={{ marginBottom: '45px', marginLeft: '25px' }}>\n      {portionItems > 1 && (\n        <>\n          <button onClick={() => setPosionItems(1)}>&laquo;</button>\n          <button onClick={() => setPosionItems(portionItems - 1)}>\n            Назад\n          </button>\n        </>\n      )}\n      {usersPage\n        .filter((num) => num >= leftside && num <= rightSize)\n        .map((num) => {\n          return (\n            <span\n              style={{ margin: '5px', cursor: 'pointer' }}\n              className={currentPageState === num ? classes.isActive : ''}\n              key={num}\n              onClick={() => currentPageNum(num)}\n            >\n              {num}\n            </span>\n          );\n        })}\n      {itemBlock > portionItems && (\n        <>\n          <button onClick={() => setPosionItems(portionItems + 1)}>\n            Вперед\n          </button>\n          <button onClick={() => setPosionItems(itemBlock)}>&raquo;</button>\n        </>\n      )}\n    </div>\n  );\n};\n","import { FC, useState } from 'react';\nimport classes from './Users.module.css';\n\ntype Props = {\n  setUsersOnPage: (value: number) => void;\n  usersOnPage: number;\n};\n\nexport const CountInputOnePage: FC<Props> = ({\n  usersOnPage,\n  setUsersOnPage,\n}) => {\n  const count: number[] = [10, 25, 50, 100];\n  const [inputCount, setInputCount] = useState<string>('');\n\n  const handleClick = () => {\n    setUsersOnPage(+inputCount);\n    setInputCount('');\n  };\n\n  return (\n    <>\n      <label>\n        Выберите количество пользователей на странице:\n        {count.map((item) => (\n          <span\n            onClick={() => setUsersOnPage(item)}\n            className={\n              usersOnPage === item ? classes.isActive : classes.nonActive\n            }\n            key={item}\n          >\n            {item}\n          </span>\n        ))}\n      </label>\n      <br />\n      <label>\n        Введите свое количество пользователей(минимум 1, максимум 100):\n        <input\n          style={{ marginLeft: '15px' }}\n          value={inputCount}\n          onChange={(e) => setInputCount(e.target.value)}\n        />\n        <button onClick={handleClick}>Ok</button>\n      </label>\n    </>\n  );\n};\n","import { FC, useEffect, useState } from 'react';\nimport classes from './Users.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PageCount } from './PagesCount';\nimport { HTTPS, USER } from '../../Api/api';\nimport { Preloader } from '../Preloader/Preloader';\nimport ava from '../../../Assets/cOPpcB6.png';\nimport { NavLink } from 'react-router-dom';\nimport { StoreState } from 'src/Components/Store';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { getTotalUser } from 'src/Components/Store/totalReducer';\nimport {\n  deleteFollowed,\n  getRes,\n  postFollowed,\n} from 'src/Components/Store/userReducer ';\nimport { AnyAction } from 'redux';\nimport { CountInputOnePage } from './CountInputOnePage';\n\nexport const Users: FC = () => {\n  const [usersOnPage, setUsersOnPage] = useState(25);\n  const stateUser = useSelector((state: StoreState) => state.users.userItems);\n  const showSpiner = useSelector((state: StoreState) => state.users.isLoader);\n  const currentPageState = useSelector(\n    (state: StoreState) => state.currentPage\n  );\n  const dispatch = useDispatch<ThunkDispatch<StoreState, void, AnyAction>>();\n\n  useEffect(() => {\n    dispatch(\n      getRes(\n        HTTPS + USER + `?page=${currentPageState}` + `&count=${usersOnPage}`\n      )\n    );\n    dispatch(getTotalUser(HTTPS + USER));\n  }, [dispatch, currentPageState, usersOnPage]);\n\n  const toggleFollowed = (id: number) => {\n    dispatch(postFollowed(id));\n  };\n  const toggleUnFollowed = (id: number) => {\n    dispatch(deleteFollowed(id));\n  };\n\n  return (\n    <div>\n      <h1>Users</h1>\n      <CountInputOnePage\n        usersOnPage={usersOnPage}\n        setUsersOnPage={setUsersOnPage}\n      />\n      <PageCount usersOnPage={usersOnPage} />\n      {showSpiner ? (\n        <Preloader />\n      ) : (\n        stateUser &&\n        stateUser.map((item) => (\n          <div key={item.id} className={classes.userContainer}>\n            <div className={classes.userData}>\n              <NavLink to={`/Profile/${item.id}`}>\n                <img\n                  className={classes.userPhoto}\n                  src={item.photos.small !== null ? item.photos.small : ava}\n                  alt={item.name}\n                />\n              </NavLink>\n\n              {item.followed ? (\n                <button\n                  className={classes.userFallowedBtn}\n                  onClick={() => toggleUnFollowed(item.id)}\n                >\n                  Unfollowed\n                </button>\n              ) : (\n                <button\n                  className={classes.userFallowedBtn}\n                  onClick={() => toggleFollowed(item.id)}\n                >\n                  Followed\n                </button>\n              )}\n            </div>\n            <div className={classes.userInfo}>\n              <div className={classes.userName}>\n                <span>\n                  User Name: <p>{item.name}</p>\n                </span>\n                <span>\n                  User Status: <p>{item.status}</p>\n                </span>\n              </div>\n              <div className={classes.userLocation}>\n                <span>\n                  User City: <p>{'item.location.city'}</p>\n                </span>\n                <span>\n                  User Country: <p>{'item.location.country'}</p>\n                </span>\n              </div>\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n"],"names":["PageCount","_ref","usersOnPage","totalUsers","useSelector","state","total","currentPageState","currentPage","dispatch","useDispatch","usersPage","usersDef","Math","ceil","itemBlock","_useState","useState","_useState2","_slicedToArray","portionItems","setPosionItems","leftside","rightSize","i","push","_jsxs","style","marginBottom","marginLeft","children","_Fragment","_jsx","onClick","filter","num","map","margin","cursor","className","classes","currentPageNum","CountInputOnePage","setUsersOnPage","inputCount","setInputCount","item","value","onChange","e","target","Users","stateUser","users","userItems","showSpiner","isLoader","useEffect","getRes","HTTPS","USER","concat","getTotalUser","Preloader","NavLink","to","id","src","photos","small","ava","alt","name","followed","deleteFollowed","postFollowed","status"],"sourceRoot":""}