Использованное Api - https://social-network.samuraijs.com/api/1.0/

Данные тестового аккаунта:

Email: free@samuraijs.com
Password: free

Можно отдельно зарегестрироваться через сайт API  и использовать собственный аккаунт


Сайт написан по Youtube курсу "It-Kamasutra" - Путь Самурая 1.0 с использованием новых возможностей React библиотеки.
Написано на функциональных компонентах с использованием Хуков.
Api использовано от "It-Kamasutra", вместо Axios использовалось Fetch запросы.
Store реализован через Redux-toolkit, Redux-Thunk, для добавления данных о регистрированном пользователе и хранении данных в локальном сторе использовался Redux-Persist. Реализован публичный и приватный роут.
При создании компонент использовались частые хуки такие как - useState, useEffect, useDispatch, useSelector, React-hook-form.
Для небольшого оформления(акцент делался больше на логику) использовались css-module.components, inline styles.
В проекте реализован TypeScript(базовые вещи).
При переходе на страницу Profile - отображаются данные регистрированного пользователя, так же при выборе любого пользователя со страницы Users происходит переход на страницу Profile и отображаются данные выбранного пользователя.
У регистрированного пользователя по клику на Edit появляется форма с фокусом(для формы использовался пакет Zod Form), где можно редактировать данные о пользователе.
Так же возможна замена аватара. Посты под данными, реализованы локально и не имеют доступа на Api аватарка в сообщениях меняется согласно выбранному пользователю. При отсутствии текста в input кнопка не активна с надписью Write message, после ввода текста кнопка становиться активной с надписью Add message.
Не реализован функционал изменения статуса у регистрированного пользователя(дабы не захломлять API разработчика)
Если пользователь не регистрирован - происходит переход со страниц Users и Profile(Private route) на страницу Login с формой для заполнения, при вводе 5 раз неверного пароля появляется captcha для защиты от бота.

При переходе на страницу Messages - отображаются сообщения взятые из локального стейта. Нет привязки к API и не реализовано разделение сообщений на пользователей. Общее представления реализации UseState

При переходе на страницу Users - отображаются данные всех пользователей зарегестрированных на сервере. Подписка и отписка от пользователя, выбор количества отображаемых пользователей на странице, возможность указать собственное количество отображения пользователей на странице, пагинация страниц  - всё работает в связке с Api сервера.

Планирую в дальнейшем добавить страницу News и ToDo List.

